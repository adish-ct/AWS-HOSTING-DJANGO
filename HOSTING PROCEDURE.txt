iHOSTING PROCEDURE 

CREATE INSTANCE IN AWS

Copy the key from AWS and open terminal in .pem file directory

* Run with the key
*	sudo apt update
	sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl

* Connect with database : 	sudo -u postgres psql

				( you can use your own database credentials instead of this but you have to configure into your project settings also)

* Create Database 	:  	CREATE DATABASE myproject; 

* Create User 		: 	CREATE USER myprojectuser WITH PASSWORD 'password';

* Provide previleges  	: 	GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;

* Quit Database		: 	\q

* Update PIP		:	sudo -H pip3 install --upgrade pip

* Install Virtual env	:	sudo -H pip3 install virtualenv

* Create a directory	:	mkdir ~/myprojectdir ( optional )

* Change directory	:	cd ~/myprojectdir

				<<<<<<< HEAD
* Create Virtual env	:	virtualenv myprojectenv ( you can create env in your project after clonning)


* Create Virtual env	:	virtualenv myprojectenv ( or you can create virtual env inside your project directory after cloning your project )
				

* Activate Virtual env	:	source myprojectenv/bin/activate

* Install psychopg	:	pip install django gunicorn psycopg2-binary

	Next clone git hub repository into ubuntu terminal

* Clone to git		:	git clone https://github.com/adish-ct/project.git

* Check dirctories	: 	ls

* Find path 		: 	pwd

* Open file		: 	nano file_name

* Open the settings file and make changes 

* Secrete key - database - email system -  static - razorpay

* Data base 		:	DATABASES = {
   					 'default': {
       					 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        				 'NAME': 'myproject',
        				 'USER': 'myprojectuser',
        				 'PASSWORD': 'password',
       					 'HOST': 'localhost',
        				 'PORT': '',
    						}
					}

* Static 		:	STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

<<<<<<< HEAD
* install requirements 	:	pip install -r requirements.txt (create requirements.txt in your local project)
=======
* install requirements 	:	pip install -r requirements.txt ( you have to create requirements.txt in your local project before using this command )
>>>>>>> 6495bdad5373d65c7715ca73e063ba15b3ac1833

* check installation 	:	pip freeze

	Install all requirement modules

* Make migrations	:	 python manage.py makemigrations

* Migrate		:	python manage.py migrate

* Create super user	:	python manage.py createsuperuser

* Collect static	:	python manage.py collectstatic  ( type yes for confirmation )

* Deactivate env	:	deactivate

	GUNICORN SETUP	

* Creating systemd socket 	

			:	sudo nano /etc/systemd/system/gunicorn.socket

	code		:

			 [Unit]
			 Description=gunicorn socket

			 [Socket]
			 ListenStream=/run/gunicorn.sock

			 [Install]
			 WantedBy=sockets.target

* Create open systemd socket service file

			:	sudo nano /etc/systemd/system/gunicorn.service

<<<<<<< HEAD
	code 		: 	(you have to paste a service file code that I will provide a link in readme you can copy the code from 						there with proper syntax)

=======
	code 		:       
>>>>>>> 6495bdad5373d65c7715ca73e063ba15b3ac1833
			
			
* start gunicon		:	sudo systemctl start gunicorn.socket
	and enable		sudo systemctl enable gunicorn.socket
			
* Checking gunicon 	:	sudo systemctl status gunicorn.socket 
	status			(Ensure that the active is listening )

* Check existing 
	gunicon		:	file /run/gunicorn.sock 

* Check gunicon
	socket		:	sudo journalctl -u gunicorn.socket

* Testing socket
	activation	:	sudo systemctl status gunicorn
				(make sure that active : inactive(dead))

* Test the socket 
	activation	:	curl --unix-socket /run/gunicorn.sock localhost
				(html page will show )
	
* gunicon status	:	sudo systemctl status gunicorn
				(make sure active : active ( running ))

* gunicon check		:	sudo journalctl -u gunicorn
				( its not mandatory , use if any error occuring in previous command)

* Systemd reload	:	sudo systemctl daemon-reload
				( optional )

* Restart systemd	:	sudo systemctl restart gunicorn
				( optional )

* Configure nginx	:	sudo nano /etc/nginx/sites-available/myproject


	code 		:	server {
   					 listen 80;
    					server_name server_domain_or_IP;

    					location = /favicon.ico { access_log off; log_not_found off; }
    					location /static/ {
       					root /home/sammy/myprojectdir;
    					}

    					location / {
        				include proxy_params;
        				proxy_pass http://unix:/run/gunicorn.sock;
    					}
				}

				( set the directory of your static folder,  may be home/ubuntu/project_folder static folder should be there )

				( save and close after changing the path )

* Enable the file	:	sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled

* Test your nginx	:	sudo nginx -t
				( syntax is ok)
				( test is successfull )

* Restart nginx		:	sudo systemctl restart nginx

* Remove fire wall rule	:	sudo ufw delete allow 8000

* Allow nginx to control:	sudo ufw allow 'Nginx Full'

